// C++ code to implement the iterative approach
#include <iostream>
#include <stack>
using namespace std;
 
// Definition of a BST node
struct Node {
    int data;
    Node *left, *right;
};
 
// Function to create a new BST node
Node* newNode(int key)
{
    Node* node = new Node;
    node->data = key;
    node->left = node->right = NULL;
    return node;
}
 
// Function to insert a new node in BST
Node* insert(Node* root, int key)
{
    // If the tree is empty, return a new node
    if (root == NULL)
        return newNode(key);
 
    // Otherwise, recur down the tree
    if (key < root->data)
        root->left = insert(root->left, key);
    else if (key > root->data)
        root->right = insert(root->right, key);
 
    // Return the (unchanged) node pointer
    return root;
}
 
// Function to find the k-th smallest
// element in BST
int kthSmallest(Node* root, int k)
{
    // Create an empty stack
    stack<Node*> s;
 
    // Loop until stack is empty or
    // k becomes zero
    while (root != NULL || !s.empty()) {
 
        // Push all the left subtree
        // nodes onto the stack
        while (root != NULL) {
            s.push(root);
            root = root->left;
        }
 
        // Pop the top node from the
        // stack and check if it is
        // the k-th element
        root = s.top();
        s.pop();
 
        if (--k == 0)
            return root->data;
 
        // Set root to the right child
        // and continue with the traversal
        root = root->right;
    }
 
    // If k is greater than the number
    // of nodes in BST, return -1
    return -1;
}
 
// Driver Code
int main()
{
    Node* root = NULL;
    int keys[] = { 20, 8, 22, 4, 12, 10, 14 };
 
    // Insert all the keys into BST
    for (int x : keys)
        root = insert(root, x);
 
    int k = 4;
 
    // Find the k-th smallest element in BST
    int kth_smallest = kthSmallest(root, k);
    if (kth_smallest != -1)
        cout << "K-th smallest element in BST is: "
             << kth_smallest << endl;
    else
        cout << "Invalid input" << endl;
 
    return 0;
}
